name: Publish spark-k8s-test to TestPyPI

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+a[0-9]+'  # Matches tags like v1.0.0a0


env:
  BRANCH: ${{ github.ref_name }}


jobs:
  ci-checks:
    uses: ./.github/workflows/ci-checks.yaml

  release_checks:
    name: Checks before release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: true
    defaults:
      run:
        working-directory: ./python
    steps:
      - id: checkout
        name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0
      - id: setup_python
        name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.10"
          architecture: x64
      - name: Install poetry
        run: |
          pipx install poetry
      - id: install_environment
        name: Set up build environment
        run: |
          poetry lock
      - id: package_metadata
        name: Fetch package metadata
        run: |
          NAME=$(poetry version | awk '{print $1}')
          VERSION=$(poetry version | awk '{print $2}')
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - id: version_vs_tag_check
        name: Check if tag version matches project version
        run: |
          VERSION=${{ steps.package_metadata.outputs.version }}
          BRANCH=${{ env.BRANCH }}
          if [[ "$BRANCH" != "v$VERSION" ]]; then exit 1; fi
    outputs:
      package_name: ${{ steps.package_metadata.outputs.name }}
      package_version: ${{ steps.package_metadata.outputs.version }}

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: [release_checks, ci-checks]
    outputs:
      VERSION: ${{ steps.build.outputs.VERSION }}
    defaults:
      run:
        working-directory: ./python
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0
      - name: Install poetry
        run: pipx install poetry
      - name: Check for tag and build package
        id: build
        run: |
          VERSION=$(poetry version -s)
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: distfiles
          path: python/dist/

  upload-to-test-pypi:
    name: Publish to PyPI
    needs: [release_checks, ci-checks, build]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/spark-k8s-test
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: distfiles
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
    permissions:
      id-token: write # Needed for trusted publishing (https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/)

