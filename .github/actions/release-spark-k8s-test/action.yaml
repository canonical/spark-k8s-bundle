# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

name: Release spark-k8s-test
description: Release the spark-k8st-test package to PyPI / TestPyPI

inputs:
  test-release:
    description: 'Specifies whether this release is a test release (and thus to be released to TestPyPI)'
    required: false
    default: false

runs:
  using: 'composite'

  steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}
        fetch-depth: 0

    - id: setup_python
      name: Setup Python
      uses: actions/setup-python@v5.3.0
      with:
        python-version: "3.10"
        architecture: x64

    - name: Install poetry
      run: |
        pipx install poetry

    - id: package_metadata
      name: Fetch package metadata
      working-directory: ./python
      shell: bash
      run: |
        NAME=$(poetry version | awk '{print $1}')
        if [ "${{ inputs.test-release }}" = "true" ]; then
          # Generate a random version string for test release
          VERSION="0.0.0-$(uuidgen | tr '[:upper:]' '[:lower:]' | cut -d'-' -f1)"
        else
          VERSION=$(poetry version | awk '{print $2}')
        fi
        echo "name=$NAME" >> "$GITHUB_OUTPUT"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

    - id: version_vs_tag_check
      name: Check if tag version matches project version
      shell: bash
      run: |
        VERSION=${{ steps.package_metadata.outputs.version }}
        BRANCH=${{ env.BRANCH }}
        if [[ "$TEST_RELEASE" != "true" && "$BRANCH" != "v$VERSION" ]]; then exit 1; fi

    - name: Build package
      id: build
      working-directory: ./python
      shell: bash
      run: |
        poetry build

    - id: artifact_names
      name: Compute artifact names outputs
      shell: bash
      run: |
        _NAME=${{ steps.package_metadata.outputs.name }}
        _VERSION=${{ steps.package_metadata.outputs.versionn }}
        echo "wheel=${_NAME}-${_VERSION}-py3-none-any.whl" >> "$GITHUB_OUTPUT"
        echo "tarball=${_NAME}-${_VERSION}.tar.gz" >> "$GITHUB_OUTPUT"

    - name: Create Github Release
      uses: softprops/action-gh-release@v2
      if: ${{ inputs.test-release == 'false' }}
      working-directory: ./python
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: spark-k8s-test v${{ needs.release_checks.outputs.package_version }}
        body_path: ".github/RELEASE-TEMPLATE.md"
        files: |
          dist/${{ steps.artifact_names.outputs.wheel }}
          dist/${{ steps.artifact_names.outputs.tarball }}

    - name: Publish to PyPI
      if: ${{ inputs.test-release == 'false' }}
      working-directory: ./python
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Publish to TestPyPI
      if: ${{ inputs.test-release == 'true' }}    
      working-directory: ./python
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
